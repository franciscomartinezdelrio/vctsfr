use_r("plot_ts")
library(devtools)
use_r("plot_ts")
use_testthat()
use_test()
use_package("ggplot2")
load_all()
plot_ts(3)
load_all()
plot_ts(3)
?stopifnot
?stop
load_all()
plot_ts(3)
test()
load_all()
plot_ts(USAccDeaths)
plot_ts(USAccDeaths)
ts_df
ggplot2::ggplot(ts_df, ggplot2::aes_string('x', 'y'))
load_all()
plot_ts(USAccDeaths)
load_all()
plot_ts(USAccDeaths)
load_all()
load_all()
plot_ts(USAccDeaths)
?is.logical
load_all()
plot_ts(USAccDeaths)
load_all()
plot_ts(USAccDeaths)
plot_ts(USAccDeaths, sdp = 4)
plot_ts(USAccDeaths, sdp = FALSE)
plot_ts(USAccDeaths)
?var
document()
document()
?plot.ts
load_all
load_all()
?plot.ts
document()
install()
library(vctsfr)
?plot_ts
plot_ts(USAccDeaths)
?var
?is.null
?is.atomic
is.double(3L)
?is.numeric
is.numeric(USAccDeaths)
is.ts(USAccDeaths)
is.ts(1:3)
load_all
library(devtools)
load_all()
plot_ts(USAccDeaths)
load_all()
plot_ts(USAccDeaths)
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths
)
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
plot_ts(USAccDeaths)
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
plot_ts(USAccDeaths)
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
plot_ts(USAccDeaths)
plot_ts(USAccDeaths, future = TRUE)
library(vctsfr)
?plot_ts
check()
?type
check()
test()
check()
check()
use_mit_license()
check()
library(vctsfr)
load_all()
plot_ts(USAccDeaths, future = TRUE)
plot_ts(USAccDeaths, future = rep(9000, 5))
load_all()
plot_ts(USAccDeaths, future = rep(9000, 5))
check()
load_all()
test()
load_all()
test()
test()
test()
load_all()
test()
plot_ts(USAccDeaths, future = 1, prediction = c(1, 1))
load_all()
test()
load_all()
plot_ts(USAccDeaths, future = 1, prediction = c(1, 1))
plot_ts(USAccDeaths, future = rep(mean(USAccDeaths), 10), prediction = rep(tail(USAccDeaths, 1), 10))
?window
presidents
window(presidents, 1960, c(1969,4))
example(plot_ts)
library(vctsfr)
example(plot_ts)
examples(plot_ts)
document()
example(plot_ts)
library(vcsfr)
library(vctsfr)
example(plot_ts)
?plot.ts
?plot_ts
?window
library(tsfknn)
?knn_forecasting
document()
?plot_ts
library(vctsfr)
?plot_ts
example(plot_ts)
?window
plot(USAccDeaths)
frequency(USAccDeaths)
end(USAccDeaths)
?window
load_all()
document()
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
rep(mean(USAccDeaths, 12))
library(vctsfr)
example(plot_ts)
x <- "pepe"
paste("parameter", pepe, "should be")
paste("parameter", x, "should be")
length(NULL)
library(devtools)
test()
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
example(plot_ts)
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
p <- ts(rnorm(20, 0, 3))
frequency(p)
library(vctsfr)
frequency(p)
example(plot_ts)
?geom_ribon
?geom_ribbon
load_all()
t <- ts(rnorm(20, 0, 3))
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
t <- ts(rnorm(20, 0, 3))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
?geom_ribbon
?geom_ribbon
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = rep(3, 6), lpi = rep(-3, 6))
?confint
t <- ts(rnorm(40, 0, 3)) # time series
p <- rep(mean(t), 6)     # prediction
upi <- p + qt(0.95, length(t)-1)*sd(t)/sqrt(length(t))
lpi <- p - qt(0.95, length(t)-1)*sd(t)/sqrt(length(t))
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
upi
lpi
library(forecast)
t
x <- meanf(t, h = 6, level = 90)
x$upper
qt(0.95)*sd(t)
t
qnorm(0.95)*sd(t)
mean(t) + qnorm(0.95)*sd(t)
?meanf
meanf
?rwf
rwf
t <- ts(rnorm(40, 0, 3)) # time series
p <- rep(mean(t), 6)     # prediction
upi <- p + qnorm(0.975)*sd(t)
lpi <- p - qnorm(0.975)*sd(t)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
x$lower
document()
test()
check()
check()
t <- ts(rnorm(40, 0, 3)) # time series
p <- rep(mean(t), 6)     # prediction
upi <- p + qnorm(0.975)*sd(t)
lpi <- p - qnorm(0.975)*sd(t)
plot_ts(t, future = rep(0, 6), prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
library(devtools)
t <- ts(rnorm(40, 0, 3)) # time series
p <- rep(mean(t), 6)     # prediction
upi <- p + qnorm(0.975)*sd(t)
lpi <- p - qnorm(0.975)*sd(t)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
install.packages(c(
"colorBlindness", "directlabels", "dplyr", "ggforce", "gghighlight",
"ggnewscale", "ggplot2", "ggraph", "ggrepel", "ggtext", "ggthemes",
"hexbin", "Hmisc", "mapproj", "maps", "munsell", "ozmaps",
"paletteer", "patchwork", "rmapshaper", "scico", "seriation", "sf",
"stars", "tidygraph", "tidyr", "wesanderson"
))
install.packages(c("colorBlindness", "directlabels", "dplyr", "ggforce", "gghighlight", "ggnewscale", "ggplot2", "ggraph", "ggrepel", "ggtext", "ggthemes", "hexbin", "Hmisc", "mapproj", "maps", "munsell", "ozmaps", "paletteer", "patchwork", "rmapshaper", "scico", "seriation", "sf", "stars", "tidygraph", "tidyr", "wesanderson"))
install.packages(c("colorBlindness", "directlabels", "dplyr", "ggforce", "gghighlight", "ggnewscale", "ggplot2", "ggraph", "ggrepel", "ggtext", "ggthemes", "hexbin", "Hmisc", "mapproj", "maps", "munsell", "ozmaps", "paletteer", "patchwork", "rmapshaper", "scico", "seriation", "sf", "stars", "tidygraph", "tidyr", "wesanderson"))
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, sdp = FALSE)
load_all()
library(devtools)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, sdp = FALSE)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, sdp = FALSE)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
df
df_f
df
rbind(df, NULL)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
load_all()
?geom_line
load_all()
?geom_line
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
plot_ts(t, prediction = rep(mean(t), 6))
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, sdp = FALSE)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, sdp = FALSE)
plot_ts(USAccDeaths) # plot a time series
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
library(vctsfr)
example(plot_ts)
?sample
confint()
?confint
plot_ts(USAccDeaths)
plot_ts(USAccDeaths, level = -1)
load_all()
plot_ts(USAccDeaths, level = -1)
plot_ts(USAccDeaths, level = 1.1)
plot_ts(USAccDeaths, level = c(0.5, 0.5))
plot_ts(USAccDeaths, level = "hola")
load_all()
ts <- window(USAccDeaths, end = c(1977, 12))
f <- window(USAccDeaths, start = c(1978, 1))
t <- ts(rnorm(40, 0, 3)) # time series
p <- rep(mean(t), 6)     # prediction
upi <- p + qnorm(0.975)*sd(t)
lpi <- p - qnorm(0.975)*sd(t)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
df
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
check()
?scale_colour_manual
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
load_all()
plot_ts(t, prediction = rep(mean(t), 6), upi = upi, lpi = lpi, level = 0.95)
library(NN3)
library(StatBench)
out1 <- NN3::forecast_NN3(StatBench::naive1, series = nn3[1])
nn3
data(nn3)
out1 <- NN3::forecast_NN3(StatBench::naive1, series = nn3[1])
out2 <- NN3::forecast_NN3(StatBench::SES, series = nn3[1])
plot_ts(c("Naive", "SES"), ts1 = out1[[1]], out2[[1]])
plot_ts <- function(names, ts1, ...) {
df1 <- data.frame(x = as.numeric(time(ts1$series)),
y = as.numeric(ts1$series),
type = "Historical")
df2 <- data.frame(x = as.numeric(time(ts1$observations)),
y = as.numeric(ts1$observations),
type = "Future values")
df3 <- data.frame(x = as.numeric(time(ts1$predictions)),
y = as.numeric(ts1$predictions),
type = names[1])
df <- rbind(df1, df2, df3)
count <- 2
for (l in list(...)) {
df <- rbind(df,
data.frame(x = as.numeric(time(l$predictions)),
y = as.numeric(l$predictions),
type = names[count])
)
count <- count + 1
}
p <- ggplot2::ggplot(df, mapping = ggplot2::aes(x, y)) +
ggplot2::geom_line(ggplot2::aes(color = type))
p <- p + ggplot2::labs(color = "Series", x = "Time")
p
}
plot_ts(c("Naive", "SES"), ts1 = out1[[1]], out2[[1]])
use_r(plot_predictions)
use_r("plot_predictions")
is.list(1:3)
list(3, x = 5)
names(list)
l <- list(3, x = 5)
names(list)
names(l)
any(names(l) == "")
l
for (x in l) print(x^2)
seq_along(l)
seq_along(NULL)
load_all()
load_all()
ts <- window(USAccDeaths, end = c(1977, 12))
tail(ts)
load_all()
ts <- window(USAccDeaths, end = c(1977, 12))
f <- window(USAccDeaths, start = c(1978, 1))
p <- list(mean = rep(mean(ts), 12), naive = rep(tail(ts, 1), 12))
plot_predictions(ts, future = f, predictions = p)
load_all()
plot_predictions(ts, future = f, predictions = p)
load_all()
plot_predictions(ts, future = f, predictions = p)
load_all()
plot_predictions(ts, future = f, predictions = p)
dlstats::cran_stats("tsfknn")
dlstats::cran_stats("tsfgrnn")
document()
document()
library(vctsfr)
?plot_predictions
document()
library(vctsfr)
?plot_predictions
document()
library(vctsfr)
?plot_predictions
example("plot_predictions")
library(vctsfr)
?example(plot_ts)
example(plot_ts)
library(vctsfr)
example(plot_ts)
document()
library(devtools)
document()
library(vctsfr)
example(plot_ts)
example("plot_predictions")
document()
library(vctsfr)
document()
example("plot_predictions")
library(vctsfr)
example("plot_predictions")
document()
library(vctsfr)
example("plot_predictions")
document()
library(vctsfr)
example("plot_predictions")
example("plot_predictions")
library(devtools)
load_all()
ts <- window(USAccDeaths, end = c(1977, 12))
f <- window(USAccDeaths, start = c(1978, 1))
prediction1 <- rep(mean(ts), 12)
prediction2 <- as.vector(window(ts, start = c(1977, 1)))
p <- list(mean = prediction1, naive = prediction2)
plot_predictions(ts, future = f, predictions = p)
load_all()
plot_predictions(ts, future = f, predictions = p)
plot_predictions(ts, future = f, predictions = p, sdp = FALSE)
plot_predictions(ts, future = f, predictions = p, sdp = FALSE)
load_all()
plot_predictions(ts, future = f, predictions = p, sdp = FALSE)
load_all()
plot_predictions(ts, future = f, predictions = p, sdp = FALSE)
load_all()
plot_predictions(ts, future = f, predictions = p, sdp = FALSE)
plot_predictions(ts, future = f, predictions = p)
