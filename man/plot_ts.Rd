% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_ts.R
\name{plot_ts}
\alias{plot_ts}
\title{Create a ggplot object with a time series and forecast}
\usage{
plot_ts(
  ts,
  future = NULL,
  prediction = NULL,
  upi = NULL,
  lpi = NULL,
  level = NULL,
  sdp = TRUE
)
}
\arguments{
\item{ts}{a time series of class \code{ts}.}

\item{future}{NULL (default) or a time series of class \code{ts} or a vector.
Future values of the time series.}

\item{prediction}{NULL (default) or a time series of class \code{ts} or a
vector. Prediction of the time series.}

\item{upi}{NULL (default) or a time series of class \code{ts} or a vector.
Upper limit of a prediction interval.}

\item{lpi}{NULL (default) or a time series of class \code{ts} or a vector.
Lower limit of a prediction interval.}

\item{level}{NULL (default) a number in the interval (0, 100) indicating the
level of the prediction interval.}

\item{sdp}{logical. Should data points be shown?}
}
\value{
The ggplot object representing the time series and its forecast.
}
\description{
A ggplot object associated with the time series (and, optionally, its future
values, prediction and prediction intervals) is created and plotted.
}
\details{
If \code{future} or \code{prediction} are vectors then they are supposed to
start after the time series.
}
\examples{
library(ggplot2)
plot_ts(USAccDeaths) # plot a time series

# plot a time series, not showing data points
plot_ts(USAccDeaths, sdp = FALSE)

# plot a time series, its future values and a prediction
ts <- window(USAccDeaths, end = c(1977, 12))
f <- window(USAccDeaths, start = c(1978, 1))
p <- ts(window(USAccDeaths, start = c(1976, 1), end = c(1976, 12)),
        start = c(1978, 1),
        frequency = 12
)
plot_ts(ts, future = f, prediction = p)

# plot a time series and a prediction
plot_ts(USAccDeaths, prediction = rep(mean(USAccDeaths), 12))

# plot a time series, a prediction and a prediction interval
t <- ts(rnorm(40, 0, 3)) # time series
f <- rnorm(6, 0, 3)      # future values
p <- rep(mean(t), 6)     # prediction
upi <- p + qnorm(0.975)*sd(t)
lpi <- p - qnorm(0.975)*sd(t)
plot_ts(t, future = f, prediction = p, upi = upi, lpi = lpi, level = 95)
}
